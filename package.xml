<?xml version="1.0" encoding="UTF-8"?>
<package packagerversion="1.4.6" version="2.0" xmlns="http://pear.php.net/dtd/package-2.0" xmlns:tasks="http://pear.php.net/dtd/tasks-1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pear.php.net/dtd/tasks-1.0 http://pear.php.net/dtd/tasks-1.0.xsd http://pear.php.net/dtd/package-2.0 http://pear.php.net/dtd/package-2.0.xsd">
 <name>sfEasyGMapPlugin</name>
 <channel>plugins.symfony-project.org</channel>
 <summary>An easy, object-oriented, PHP abstraction of the Google Maps API</summary>
 <description>The sfEasyGMap plugin provides helpers and an objet-oriented PHP abstraction to the Google Maps API to ease the process of adding a Google Map and customising it in your symfony projects.</description>
 <lead>
  <name>Fabrice Bernhard</name>
  <user>fabriceb</user>
  <email>fabriceb@allomatch.com</email>
  <active>yes</active>
 </lead>
 <developer>
  <name>Vincent Guillon</name>
  <user>vincentg</user>
  <email>vincentg@allomatch</email>
  <active>yes</active>
 </developer>
 <developer>
  <name>Laurent Bachelier</name>
  <user>laurentb</user>
  <email>laurent@bachelier.name</email>
  <active>yes</active> 	
 </developer>
 <date>2009-05-03</date>
 <time>17:50:00</time>
 <version>
  <release>1.0.2</release>
  <api>1.0.2</api>
 </version>
 <stability>
  <release>stable</release>
  <api>stable</api>
 </stability>
 <license uri="http://www.symfony-project.org/license">MIT license</license>
 <notes>-</notes>
 <contents>
   <dir name="/">
     <file role="data" name="README" />
     <file role="data" name="LICENSE" />
     <dir name="config">
        <!-- settings -->
        <file role="data" name="app.yml" />
     </dir>
     <dir name="lib">
       <dir name="external">
         <!-- helpers -->
         <file role="data" name="RenderTag.class.php" />
       </dir>     	
       <dir name="helper">
         <!-- helpers -->
         <file role="data" name="GMapHelper.php" />
       </dir>
       <file role="data" name="GMap.class.php" />
       <file role="data" name="GMapBounds.class.php" />
       <file role="data" name="GMapCoord.class.php" />
	   <file role="data" name="GMapEvent.class.php" />
	   <file role="data" name="GMapGeocodedAddress.class.php" />
	   <file role="data" name="GMapIcon.class.php" />
       <file role="data" name="GMapMarker.class.php" />
     </dir>
     <dir name="modules">
       <dir name="sfEasyGMapPlugin">
         <file role="data" name="actions/actions.class.php" />
		 <file role="data" name="config/view.yml" />
         <file role="data" name="templates/sample1Success.php" />
		 <file role="data" name="templates/indexSuccess.php" />
       </dir>
     </dir>
     <dir name="test">
       <dir name="bootstrap">
         <!-- bootstrap -->
         <file role="data" name="unit.php" />
		 <file role="data" name="functional.php" />
       </dir>
       <dir name="unit">
         <!-- unit -->
         <file role="data" name="GMapBoundsTest.php" />
		 <file role="data" name="GMapCoordTest.php" />
		 <file role="data" name="GMapTest.php" />
       </dir>	   
     </dir>
     <dir name="web">
       <dir name="css">
         <!-- images -->
         <file role="data" name="sfEasyGMapPlugin.css" />
       </dir>
       <dir name="images">
         <!-- images -->
         <file role="data" name="nice_icon.png" />
       </dir>	   
       <dir name="js">
         <!-- javascripts -->
         <file role="data" name="sfEasyGMapPlugin.js" />
       </dir>
     </dir>
   </dir>
 </contents>
 <dependencies>
  <required>
   <php>
    <min>5.1.0</min>
   </php>
   <pearinstaller>
    <min>1.4.1</min>
   </pearinstaller>
   <package>
    <name>symfony</name>
    <channel>pear.symfony-project.com</channel>
    <min>1.0.0</min>
    <max>1.3.0</max>
    <exclude>1.3.0</exclude>
   </package>
  </required>
 </dependencies>
 <phprelease />
 <changelog>
  <release>
    <version>
      <release>0.9.4</release>
      <api>0.9.4</api>
    </version>
    <stability>
      <release>beta</release>
      <api>beta</api>
    </stability>
    <license uri="http://www.symfony-project.org/license">MIT license</license>
    <notes>
 * removed the call to the Helper Tag to use the escape_javascript function to ensure symfony 1.2 compatibility
    </notes>  	
  </release>
  <release>
	 <version>
	  <release>1.0.0</release>
	  <api>1.0.0</api>
	 </version>
	 <stability>
	  <release>stable</release>
	  <api>stable</api>
	 </stability>
	 <license uri="http://www.symfony-project.org/license">MIT license</license>
	 <notes>
* WARNING: backwards-compatibility is broken
* The GMap constructor now takes an option array as first parameter
* added some unit tests
* added some very interesting functions concerning bounds : Smallest bound containing coords, homthety transformation, zoomOut, Propel criteria "In bounds"
* added some very interesting functions concerning coordinates : you can now transform lat/lng into Google Map' pixels coordinates system and vice-versa. This enables one to calculate the bounds around a coordinate for example, knowing only the Google Map's height/width in pixels	 	
	 </notes>
  </release>
  <release>
    <version>
     <release>1.0.1</release>
     <api>1.0.1</api>
    </version>
    <stability>
     <release>stable</release>
     <api>stable</api>
    </stability>
	 <license uri="http://www.symfony-project.org/license">MIT license</license>
	 <notes>
* fabriceb: Corrected the package.xml to add all 1.2.x versions of symfony to the list of compatible versions
	 </notes>    
  </release>    
  <release>
    <version>
     <release>1.0.2</release>
     <api>1.0.2</api>
    </version>
    <stability>
     <release>stable</release>
     <api>stable</api>
    </stability>
	 <license uri="http://www.symfony-project.org/license">MIT license</license>
	 <notes>
* Corrected the Mercator projections for the GMapCoord::fromPixToLat and GMapCoord::fromLatToPix functions
* Used PHP pi() and deg2rad functions for better precision
* Created tests for the Mercator projections
* Added the GMapBounds::getBoundsContainingMarkers($markers) function
* Added the GMap::centerAndZoomOnMarkers() function which enables to guess zoom and center of the map to fit the markers. Center is easy to guess. Zoom uses width and height of smallest bound, pixel width and height of the map and Mercator projection
	 </notes>    
  </release>
 </changelog>
</package>
